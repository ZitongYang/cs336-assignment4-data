<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="21" time="5.081" timestamp="2024-05-25T21:00:58.491765" hostname="ad12a3ca-02.cloud.together.ai"><testcase classname="tests.test_deduplication" name="test_exact_line_deduplication" time="0.010" /><testcase classname="tests.test_deduplication" name="test_minhash_deduplication_exact_duplicates" time="0.003"><failure message="NotImplementedError">tmp_path = PosixPath('/tmp/pytest-of-c-zitong/pytest-8/test_minhash_deduplication_exa0')

    def test_minhash_deduplication_exact_duplicates(tmp_path):
        """
        Check that minhash deduplication properly identifies and removes exact duplicates.
        """
        documents_with_line_duplicates_paths = list(
            (FIXTURES_PATH / "documents_with_line_duplicates").glob("doc*.txt")
        )
        # Load deduplicated documents
        deduplicated_documents = []
        for path in documents_with_line_duplicates_paths:
            # NOTE: document 1 and document 2 are exact duplicates, so we only
            # want to keep one of them.
            if path.name == "doc2.txt":
                continue
            with open(path) as f:
                deduplicated_documents.append(f.read())
    
&gt;       run_minhash_deduplication(
            input_files=documents_with_line_duplicates_paths,
            output_directory=tmp_path,
            num_hashes=100,
            num_bands=10,
            ngrams=5,
            jaccard_threshold=0.8,
        )

cs336-data/tests/test_deduplication.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_files = [PosixPath('/home/c-zitong/cs336-assignment4-data/cs336-data/tests/fixtures/documents_with_line_duplicates/doc4.txt'),..., PosixPath('/home/c-zitong/cs336-assignment4-data/cs336-data/tests/fixtures/documents_with_line_duplicates/doc1.txt')]
num_hashes = 100, num_bands = 10, ngrams = 5, jaccard_threshold = 0.8
output_directory = PosixPath('/tmp/pytest-of-c-zitong/pytest-8/test_minhash_deduplication_exa0')

    def run_minhash_deduplication(
        input_files: list[os.PathLike],
        num_hashes: int,
        num_bands: int,
        ngrams: int,
        jaccard_threshold: float,
        output_directory: os.PathLike,
    ):
&gt;       raise NotImplementedError
E       NotImplementedError

cs336-data/tests/adapters.py:63: NotImplementedError</failure></testcase><testcase classname="tests.test_deduplication" name="test_minhash_deduplication_fuzzy_duplicates" time="0.003"><failure message="NotImplementedError">tmp_path = PosixPath('/tmp/pytest-of-c-zitong/pytest-8/test_minhash_deduplication_fuz0')

    def test_minhash_deduplication_fuzzy_duplicates(tmp_path):
        """
        Check that minhash deduplication properly identifies and removes fuzzy
        duplicates (two documents with the MIT license, but with slightly different
        whitespace and attribution).
        """
        documents_with_fuzzy_duplicates_paths = list(
            (FIXTURES_PATH / "documents_with_fuzzy_duplicates").glob("*.txt")
        )
        # Load deduplicated documents
        deduplicated_documents = []
        kept_duplicated_documents = []
        for path in documents_with_fuzzy_duplicates_paths:
            # rails_mit_license.txt and react_mit_license.txt are fuzzy duplicates, so we only want
            # to keep one of them.
            with open(path) as f:
                if (
                    path.name == "rails_mit_license.txt"
                    or path.name == "react_mit_license.txt"
                ):
                    kept_duplicated_documents.append(f.read())
                else:
                    deduplicated_documents.append(f.read())
    
&gt;       run_minhash_deduplication(
            input_files=documents_with_fuzzy_duplicates_paths,
            output_directory=tmp_path,
            num_hashes=500,
            num_bands=50,
            ngrams=5,
            jaccard_threshold=0.8,
        )

cs336-data/tests/test_deduplication.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input_files = [PosixPath('/home/c-zitong/cs336-assignment4-data/cs336-data/tests/fixtures/documents_with_fuzzy_duplicates/pytorch_li...home/c-zitong/cs336-assignment4-data/cs336-data/tests/fixtures/documents_with_fuzzy_duplicates/rails_mit_license.txt')]
num_hashes = 500, num_bands = 50, ngrams = 5, jaccard_threshold = 0.8
output_directory = PosixPath('/tmp/pytest-of-c-zitong/pytest-8/test_minhash_deduplication_fuz0')

    def run_minhash_deduplication(
        input_files: list[os.PathLike],
        num_hashes: int,
        num_bands: int,
        ngrams: int,
        jaccard_threshold: float,
        output_directory: os.PathLike,
    ):
&gt;       raise NotImplementedError
E       NotImplementedError

cs336-data/tests/adapters.py:63: NotImplementedError</failure></testcase><testcase classname="tests.test_extract" name="test_extract_text_from_html_bytes" time="0.014" /><testcase classname="tests.test_langid" name="test_identify_language_english" time="0.127" /><testcase classname="tests.test_langid" name="test_identify_language_chinese_simplified" time="0.126" /><testcase classname="tests.test_pii" name="test_mask_emails_single" time="0.000" /><testcase classname="tests.test_pii" name="test_mask_emails_multiple" time="0.000" /><testcase classname="tests.test_pii" name="test_mask_emails_existing_string" time="0.000" /><testcase classname="tests.test_pii" name="test_mask_phones_single" time="0.000" /><testcase classname="tests.test_pii" name="test_mask_ips" time="0.000" /><testcase classname="tests.test_quality" name="test_classify_quality" time="0.001"><failure message="NotImplementedError">def test_classify_quality():
        low_quality_cc_path = FIXTURES_PATH / "low_quality_cc.txt"
        with open(low_quality_cc_path) as f:
            low_quality_cc = f.read()
&gt;       prediction, score = run_classify_quality(low_quality_cc)

cs336-data/tests/test_quality.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

text = "Speak Korean Now!\nTeach English Abroad and Get Paid to see the World!\nKorean Job Discussion Forums Forum Index Kore...nTEFL International Supports Dave's ESL Cafe\nTEFL Courses, TESOL Course, English Teaching Jobs - TEFL International\n"

    def run_classify_quality(text: str) -&gt; tuple[Any, float]:
&gt;       raise NotImplementedError
E       NotImplementedError

cs336-data/tests/adapters.py:42: NotImplementedError</failure></testcase><testcase classname="tests.test_quality" name="test_gopher_valid_input" time="0.001" /><testcase classname="tests.test_quality" name="test_gopher_less_than_50_non_symbol_words" time="0.001" /><testcase classname="tests.test_quality" name="test_gopher_more_than_100000_non_symbol_words" time="0.048" /><testcase classname="tests.test_quality" name="test_gopher_average_word_length_less_than_3" time="0.001" /><testcase classname="tests.test_quality" name="test_gopher_average_word_length_greater_than_10" time="0.000" /><testcase classname="tests.test_quality" name="test_gopher_more_than_30_percent_lines_ending_with_ellipsis" time="0.001" /><testcase classname="tests.test_quality" name="test_gopher_less_than_80_percent_words_with_alphabetic_character" time="0.000" /><testcase classname="tests.test_toxicity" name="test_classify_nsfw" time="1.740" /><testcase classname="tests.test_toxicity" name="test_classify_toxic_speech" time="1.743" /></testsuite></testsuites>